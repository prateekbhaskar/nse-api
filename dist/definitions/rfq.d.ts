declare const rfq: {
    baseUrls: {
        production: string;
        staging: string;
    };
    apis: {
        login: import(".").ApiContract<{
            domain: string;
            login: string;
            password: string;
        }, {
            domain: string;
            login: string;
            status: "S" | "F" | "P";
            reason?: string;
            loginKey?: string;
            firstName?: string;
            middleName?: string;
            lastName?: string;
            lastLogin?: number;
            serverTime?: number;
            broker?: boolean;
            brokerEnablementType?: "R" | "O";
        }>;
        logout: import(".").ApiContract<{}, {
            status: "C";
        }>;
        addParticipantGroup: import(".").ApiContract<{
            name: string;
            participantList: string[];
        }, {
            name: string;
            participantList: string[];
            id: number;
        }>;
        updateParticipantGroup: import(".").ApiContract<{
            name: string;
            participantList: string[];
            id: number;
        }, {
            name: string;
            participantList: string[];
            id: number;
        }>;
        getAllParticipantGroups: import(".").ApiContract<{
            id?: number;
            name?: string;
        }, {
            id: number;
            name: string;
            participantList: string[];
        }[]>;
        addParticipantLimit: import(".").ApiContract<{
            limitType: "S" | "D" | "C" | "B" | "X";
            global?: "Y" | null;
            counterPartyCode?: string | null;
            loginId?: string | null;
            brokerCode?: string | null;
            clientCode?: string | null;
            settlementType?: 0 | 1 | null;
            dayBuyLimitInfinity?: "Y" | null;
            dayBuyLimit?: number | null;
            daySellLimitInfinity?: "Y" | null;
            daySellLimit?: number | null;
            dayGrossLimitInfinity?: "Y" | null;
            dayGrossLimit?: number | null;
        }, {
            id: number;
            limitType: "S" | "D" | "C" | "B" | "X";
            global?: "Y" | null;
            counterPartyCode?: string | null;
            loginId?: string | null;
            brokerCode?: string | null;
            clientCode?: string | null;
            settlementType?: 0 | 1 | null;
            dayBuyLimitInfinity?: "Y" | null;
            dayBuyLimit?: number | null;
            daySellLimitInfinity?: "Y" | null;
            daySellLimit?: number | null;
            dayGrossLimitInfinity?: "Y" | null;
            dayGrossLimit?: number | null;
            buyUtilization?: number;
            sellUtilization?: number;
            grossUtilization?: number;
        }>;
        updateParticipantLimit: import(".").ApiContract<{
            id: number;
            limitType: "S" | "D" | "C";
            dayBuyLimitInfinity?: "Y" | null;
            dayBuyLimit?: number | null;
            daySellLimitInfinity?: "Y" | null;
            daySellLimit?: number | null;
            dayGrossLimitInfinity?: "Y" | null;
            dayGrossLimit?: number | null;
        }, {
            id: number;
            limitType: "S" | "D" | "C";
            dayBuyLimitInfinity?: "Y" | null;
            dayBuyLimit?: number | null;
            daySellLimitInfinity?: "Y" | null;
            daySellLimit?: number | null;
            dayGrossLimitInfinity?: "Y" | null;
            dayGrossLimit?: number | null;
            buyUtilization?: number;
            sellUtilization?: number;
            grossUtilization?: number;
        }>;
        getAllParticipantLimits: import(".").ApiContract<{
            id?: number;
            limitType?: "S" | "D" | "C" | "B" | "X";
            counterPartyCode?: string;
            loginId?: string;
            brokerCode?: string;
            clientCode?: string;
        }, {
            id: number;
            limitType: "S" | "D" | "C" | "B" | "X";
            global?: "Y" | null;
            counterPartyCode?: string | null;
            loginId?: string | null;
            brokerCode?: string | null;
            clientCode?: string | null;
            settlementType?: 0 | 1 | null;
            dayBuyLimitInfinity?: "Y" | null;
            dayBuyLimit?: number | null;
            daySellLimitInfinity?: "Y" | null;
            daySellLimit?: number | null;
            dayGrossLimitInfinity?: "Y" | null;
            dayGrossLimit?: number | null;
            buyUtilization?: number;
            sellUtilization?: number;
            grossUtilization?: number;
        }[]>;
        addPortfolioLimit: import(".").ApiContract<{
            limitType: "S" | "I";
            global?: "Y" | null;
            isin?: string | null;
            issuer?: string | null;
            valueType?: "Q" | "V";
            dayBuyLimitInfinity?: "Y" | null;
            dayBuyLimit?: number | null;
            dayBuyValueLimitInfinity?: "Y" | null;
            dayBuyValueLimit?: number | null;
            daySellLimitInfinity?: "Y" | null;
            daySellLimit?: number | null;
            daySellValueLimitInfinity?: "Y" | null;
            daySellValueLimit?: number | null;
            basePrice?: number;
            baseYield?: number;
        }, {
            id: number;
            limitType: "S" | "I";
            global?: "Y" | null;
            isin?: string | null;
            issuer?: string | null;
            valueType?: "Q" | "V";
            dayBuyLimitInfinity?: "Y" | null;
            dayBuyLimit?: number | null;
            dayBuyValueLimitInfinity?: "Y" | null;
            dayBuyValueLimit?: number | null;
            daySellLimitInfinity?: "Y" | null;
            daySellLimit?: number | null;
            daySellValueLimitInfinity?: "Y" | null;
            daySellValueLimit?: number | null;
            basePrice?: number;
            baseYield?: number;
            buyUtilization?: number;
            sellUtilization?: number;
            buyValueUtilization?: number;
            sellValueUtilization?: number;
        }>;
        updatePortfolioLimit: import(".").ApiContract<{
            limitType: "S" | "I";
            global?: "Y" | null;
            valueType?: "Q" | "V";
            dayBuyLimitInfinity?: "Y" | null;
            dayBuyLimit?: number | null;
            dayBuyValueLimitInfinity?: "Y" | null;
            dayBuyValueLimit?: number | null;
            daySellLimitInfinity?: "Y" | null;
            daySellLimit?: number | null;
            daySellValueLimitInfinity?: "Y" | null;
            daySellValueLimit?: number | null;
            basePrice?: number;
            baseYield?: number;
        }, {
            id: number;
            limitType: "S" | "I";
            global?: "Y" | null;
            valueType?: "Q" | "V";
            dayBuyLimitInfinity?: "Y" | null;
            dayBuyLimit?: number | null;
            dayBuyValueLimitInfinity?: "Y" | null;
            dayBuyValueLimit?: number | null;
            daySellLimitInfinity?: "Y" | null;
            daySellLimit?: number | null;
            daySellValueLimitInfinity?: "Y" | null;
            daySellValueLimit?: number | null;
            basePrice?: number;
            baseYield?: number;
            buyUtilization?: number;
            sellUtilization?: number;
            buyValueUtilization?: number;
            sellValueUtilization?: number;
        }>;
        getAllPortfolioLimits: import(".").ApiContract<{
            id?: number;
            limitType: "S" | "I";
            isin?: string;
            issuer?: string;
        }, {
            id: number;
            limitType: "S" | "I";
            global?: "Y" | null;
            isin?: string | null;
            issuer?: string | null;
            valueType?: "Q" | "V";
            dayBuyLimitInfinity?: "Y" | null;
            dayBuyLimit?: number | null;
            dayBuyValueLimitInfinity?: "Y" | null;
            dayBuyValueLimit?: number | null;
            daySellLimitInfinity?: "Y" | null;
            daySellLimit?: number | null;
            daySellValueLimitInfinity?: "Y" | null;
            daySellValueLimit?: number | null;
            basePrice?: number | null;
            baseYield?: number | null;
            buyUtilization?: number;
            buyValueUtilization?: number;
            sellUtilization?: number;
            sellValueUtilization?: number;
        }[]>;
        updateIssueTypeSettings: import(".").ApiContract<{
            issueCategory: "CP" | "CD" | "CB" | "SD" | "GS";
            maxSingleTransactionValueLimit: number;
            maxStvViolationAction: "W" | "B";
            yieldBandType: "D" | "P";
            yieldLowerBand?: number | null;
            yieldUpperBand?: number | null;
            yieldViolationAction: "W" | "B";
            priceBandType: "D" | "P";
            priceLowerBand?: number | null;
            priceUpperBand?: number | null;
            priceViolationAction: "W" | "B";
        }, {
            issueCategory: "CP" | "CD" | "CB" | "SD" | "GS";
            maxSingleTransactionValueLimit: number;
            maxStvViolationAction: "W" | "B";
            yieldBandType: "D" | "P";
            yieldLowerBand?: number | null;
            yieldUpperBand?: number | null;
            yieldViolationAction: "W" | "B";
            priceBandType: "D" | "P";
            priceLowerBand?: number | null;
            priceUpperBand?: number | null;
            priceViolationAction: "W" | "B";
        }>;
        getAllIssueTypeSettings: import(".").ApiContract<void, {
            issueCategory: "CP" | "CD" | "CB" | "SD" | "GS";
            maxSingleTransactionValueLimit: number;
            maxStvViolationAction: "W" | "B";
            yieldBandType: "D" | "P";
            yieldLowerBand?: number | null;
            yieldUpperBand?: number | null;
            yieldViolationAction: "W" | "B";
            priceBandType: "D" | "P";
            priceLowerBand?: number | null;
            priceUpperBand?: number | null;
            priceViolationAction: "W" | "B";
        }[]>;
        createRfqByIsin: import(".").ApiContract<{
            isin: string;
            participantCode: string;
            dealType: "D" | "B";
            clientCode: string;
            buySell: "B" | "S" | "X";
            quoteType: "Y" | "B";
            settlementType: 0 | 1;
            value: number;
            quantity?: number;
            yieldType: "YTM" | "YTP" | "YTC";
            yield: number;
            calcMethod: "M" | "O";
            price?: number | null;
            valueSell?: number | null;
            quantitySell?: number | null;
            yieldTypeSell?: "YTM" | "YTP" | "YTC" | null;
            yieldSell?: number | null;
            calcMethodSell?: "M" | "O" | null;
            priceSell?: number | null;
            gtdFlag?: "Y" | null;
            endTime?: string;
            quoteNegotiable?: "Y" | null;
            valueNegotiable?: "Y" | null;
            minFillValue?: number;
            valueStepSize?: number;
            anonymous?: "Y" | null;
            access: 1 | 2 | 3;
            groupList?: number[] | null;
            participantList?: string[];
            category?: string;
            rating?: string;
            remarks?: string;
        }, {
            number: string;
            isin: string;
            participantCode: string;
            dealType: "D" | "B";
            clientCode: string;
            clientRegType: "I" | "R";
            buySell: "B" | "S";
            quoteType: "Y" | "B";
            settlementType: 0 | 1;
            value: number;
            quantity: number;
            yieldType: "YTM" | "YTP" | "YTC";
            yield: number;
            calcMethod: "M" | "O";
            price?: number | null;
            valueSell?: number | null;
            quantitySell?: number | null;
            yieldTypeSell?: "YTM" | "YTP" | "YTC" | null;
            yieldSell?: number | null;
            calcMethodSell?: "M" | "O" | null;
            priceSell?: number | null;
            gtdFlag?: "Y" | null;
            endTime?: string;
            quoteNegotiable?: "Y" | null;
            valueNegotiable?: "Y" | null;
            minFillValue?: number;
            valueStepSize?: number;
            anonymous?: "Y" | null;
            access: 1 | 2 | 3;
            groupList?: number[] | null;
            participantList?: string[];
            category?: string;
            rating?: string;
            remarks?: string;
            date: string;
            quoteTime: string;
            settlementDate: string;
            status: "P" | "W" | "T";
            userLogin: string;
            tradedValue: number;
            confirmedValue: number;
        }[]>;
        updateRfqByIsin: import(".").ApiContract<{
            number: string;
            settlementType: 0 | 1;
            value: number;
            quantity?: number;
            yieldType: "YTM" | "YTP" | "YTC";
            yield: number;
            calcMethod: "M" | "O";
            price?: number | null;
            gtdFlag?: "Y" | null;
            endTime?: string;
            quoteNegotiable?: "Y" | null;
            valueNegotiable?: "Y" | null;
            minFillValue?: number;
            valueStepSize?: number;
            anonymous?: "Y" | null;
            access?: 1 | 2 | 3;
            groupList?: number[] | null;
            participantList?: string[];
            category?: string;
            rating?: string;
            remarks?: string;
        }, {
            number: string;
            isin: string;
            participantCode: string;
            dealType: "D" | "B";
            clientCode: string;
            clientRegType: "I" | "R";
            buySell: "B" | "S";
            quoteType: "Y" | "B";
            settlementType: 0 | 1;
            value: number;
            quantity: number;
            yieldType: "YTM" | "YTP" | "YTC";
            yield: number;
            calcMethod: "M" | "O";
            price?: number | null;
            valueSell?: number | null;
            quantitySell?: number | null;
            yieldTypeSell?: "YTM" | "YTP" | "YTC" | null;
            yieldSell?: number | null;
            calcMethodSell?: "M" | "O" | null;
            priceSell?: number | null;
            gtdFlag?: "Y" | null;
            endTime?: string;
            quoteNegotiable?: "Y" | null;
            valueNegotiable?: "Y" | null;
            minFillValue?: number;
            valueStepSize?: number;
            anonymous?: "Y" | null;
            access: 1 | 2 | 3;
            groupList?: number[] | null;
            participantList?: string[];
            category?: string;
            rating?: string;
            remarks?: string;
            date: string;
            quoteTime: string;
            settlementDate: string;
            status: "P" | "W" | "T";
            userLogin: string;
            tradedValue: number;
            confirmedValue: number;
        }[]>;
        getAllRfqByIsin: import(".").ApiContract<{
            number?: string;
            date?: string;
            isin?: string;
            participantCode?: string;
            clientRegType?: "I" | "R";
            status?: "P" | "W" | "T";
        }, {
            number: string;
            isin: string;
            participantCode: string;
            dealType: "D" | "B";
            clientCode: string;
            clientRegType: "I" | "R";
            buySell: "B" | "S";
            quoteType: "Y" | "B";
            settlementType: 0 | 1;
            value: number;
            quantity: number;
            yieldType: "YTM" | "YTP" | "YTC";
            yield: number;
            calcMethod: "M" | "O";
            price?: number | null;
            valueSell?: number | null;
            quantitySell?: number | null;
            yieldTypeSell?: "YTM" | "YTP" | "YTC" | null;
            yieldSell?: number | null;
            calcMethodSell?: "M" | "O" | null;
            priceSell?: number | null;
            gtdFlag?: "Y" | null;
            endTime?: string;
            quoteNegotiable?: "Y" | null;
            valueNegotiable?: "Y" | null;
            minFillValue?: number;
            valueStepSize?: number;
            anonymous?: "Y" | null;
            access: 1 | 2 | 3;
            groupList?: number[] | null;
            participantList?: string[] | null;
            category?: string | null;
            rating?: string | null;
            remarks?: string | null;
            date: string;
            quoteTime: string;
            settlementDate: string;
            status: "P" | "W" | "T";
            userLogin: string;
            tradedValue: number;
            confirmedValue: number;
        }[]>;
        getMarketwatchRfqByIsin: import(".").ApiContract<{
            number?: string;
            isin?: string;
            participantCode?: string;
            status?: "P" | "W" | "T";
            buySell?: "B" | "S";
        }, {
            number: string;
            date: string;
            quoteTime: string;
            isin: string;
            buySell: "B" | "S";
            quoteType: "Y" | "B";
            settlementType: 0 | 1;
            settlementDate: string;
            value: number;
            quantity: number;
            yieldType: "YTM" | "YTP" | "YTC";
            yield: number;
            calcMethod: "M" | "O";
            price?: number | null;
            gtdFlag?: "Y" | null;
            endTime?: string;
            quoteNegotiable?: "Y" | null;
            valueNegotiable?: "Y" | null;
            minFillValue?: number;
            valueStepSize?: number;
            dealType: "D" | "B";
            anonymous?: "Y" | null;
            access: 1 | 2 | 3;
            category?: string | null;
            rating?: string | null;
            remarks?: string | null;
            status: "P" | "W" | "T";
            clientCode: string;
            participantCode: string;
            tradedValue: number;
            confirmedValue: number;
        }[]>;
        addOpenRfq: import(".").ApiContract<{
            scriptDesc: string;
            openIsinList?: string[];
            participantCode: string;
            dealType: "D" | "B";
            clientCode: string;
            buySell: "B" | "S" | "X";
            quoteType: "Y" | "B";
            value: number;
            valueSell?: number;
            gtdFlag?: "Y" | null;
            endTime?: string;
            minFillValue?: number;
            valueStepSize?: number;
            anonymous?: "Y" | null;
            access: 1 | 2 | 3;
            groupList?: number[];
            participantList?: string[];
            category?: string;
            rating?: string;
            remarks?: string;
        }, {
            number: string;
            date: string;
            quoteTime: string;
            scriptDesc: string;
            openIsinList?: string[];
            participantCode: string;
            dealType: "D" | "B";
            clientCode: string;
            clientRegType: "I" | "R";
            buySell: "B" | "S" | "X";
            quoteType: "Y" | "B";
            value: number;
            gtdFlag?: "Y" | null;
            endTime?: string;
            minFillValue?: number;
            valueStepSize?: number;
            anonymous?: "Y" | null;
            access: 1 | 2 | 3;
            groupList?: number[];
            participantList?: string[];
            category?: string;
            rating?: string;
            remarks?: string;
            status: "P" | "W" | "T";
            userLogin: string;
            tradedValue: number;
            confirmedValue: number;
        }>;
        updateOpenRfq: import(".").ApiContract<{
            number: string;
            scriptDesc: string;
            openIsinList?: string[];
            value: number;
            gtdFlag?: "Y" | null;
            endTime?: string;
            minFillValue?: number;
            valueStepSize?: number;
            anonymous?: "Y" | null;
            access?: 1 | 2 | 3;
            groupList?: number[];
            participantList?: string[];
            category?: string;
            rating?: string;
            remarks?: string;
        }, {
            number: string;
            date: string;
            quoteTime: string;
            scriptDesc: string;
            openIsinList?: string[];
            participantCode: string;
            dealType: "D" | "B";
            clientCode: string;
            clientRegType: "I" | "R";
            buySell: "B" | "S" | "X";
            quoteType: "Y" | "B";
            value: number;
            gtdFlag?: "Y" | null;
            endTime?: string;
            minFillValue?: number;
            valueStepSize?: number;
            anonymous?: "Y" | null;
            access: 1 | 2 | 3;
            groupList?: number[];
            participantList?: string[];
            category?: string;
            rating?: string;
            remarks?: string;
            status: "P" | "W" | "T";
            userLogin: string;
            tradedValue: number;
            confirmedValue: number;
        }>;
        getAllOpenRfqs: import(".").ApiContract<{
            number?: string;
            date?: string;
            participantCode?: string;
        }, {
            number: string;
            scriptDesc: string;
            openIsinList?: string[];
            buySell: "B" | "S" | "X";
            quoteType: "Y" | "B";
            value: number;
            valueSell?: number | null;
            gtdFlag?: "Y" | null;
            endTime?: string | null;
            minFillValue?: number | null;
            valueStepSize?: number | null;
            dealType: "D" | "B";
            anonymous?: "Y" | null;
            access: 1 | 2 | 3;
            groupList?: number[];
            participantList?: string[];
            category?: string;
            rating?: string;
            remarks?: string;
            status: "P" | "W" | "T";
            clientCode: string;
            participantCode: string;
            userLogin: string;
            tradedValue: number;
            confirmedValue: number;
        }[]>;
        getMarketwatchOpenRfqs: import(".").ApiContract<{
            number?: string;
            participantCode?: string;
            status?: "P" | "W" | "T";
        }, {
            number: string;
            scriptDesc: string;
            openIsinList?: string[];
            clientCode: string;
            participantCode: string;
            buySell: "B" | "S" | "X";
            quoteType: "Y" | "B";
            value: number;
            valueSell?: number | null;
            gtdFlag?: "Y" | null;
            endTime?: string | null;
            minFillValue?: number | null;
            valueStepSize?: number | null;
            dealType: "D" | "B";
            anonymous?: "Y" | null;
            access: 1 | 2 | 3;
            category?: string;
            rating?: string;
            remarks?: string;
            date: string;
            status: "P" | "W" | "T";
            tradedValue: number;
            confirmedValue: number;
        }[]>;
        withdrawRfqs: import(".").ApiContract<{
            number: string;
        }[], {
            number: string;
            isin?: string;
            scriptDesc?: string;
            openIsinList?: string[];
            buySell: "B" | "S" | "X";
            quoteType: "Y" | "B";
            settlementType?: number;
            value: number;
            quantity?: number;
            yieldType?: string;
            yield?: number;
            calcMethod?: string;
            price?: number | null;
            valueSell?: number | null;
            quantitySell?: number | null;
            yieldTypeSell?: string | null;
            yieldSell?: number | null;
            calcMethodSell?: string | null;
            priceSell?: number | null;
            gtdFlag?: string | null;
            endTime?: string | null;
            quoteNegotiable?: string;
            valueNegotiable?: string;
            minFillValue?: number | null;
            valueStepSize?: number | null;
            dealType: "D" | "B";
            anonymous?: string | null;
            access: 1 | 2 | 3;
            groupList?: (number | string)[] | null;
            participantList?: string[] | null;
            category?: string | null;
            rating?: string | null;
            remarks?: string | null;
            status: "W";
            clientCode: string;
            participantCode: string;
            userLogin: string;
            tradedValue: number;
            confirmedValue: number;
        }[]>;
        addNegotiation: import(".").ApiContract<{
            ngRfqNumber: string;
            isin?: string;
            aeCode: string;
            dealType: "D" | "B";
            clientCode: string;
            buySell?: "B" | "S";
            settlementType: 0 | 1;
            value: number;
            quantity?: number;
            yieldType: string;
            yield: number;
            calcMethod: "M" | "O";
            price?: number | null;
            gtdFlag?: string | null;
            endTime?: string | null;
            remarks?: string | null;
        }, {
            rfqNumber: string;
            id: string;
            date: string;
            isin: string;
            buySell: "B" | "S";
            initSettlementType?: 0 | 1;
            initSettlementDate?: string;
            initAeCode?: string;
            initDealType?: "D" | "B";
            initClientCode?: string;
            initClientRegType?: "I" | "R";
            initValue?: number;
            initQuantity?: number;
            initYieldType?: string;
            initYield?: number;
            initCalcMethod?: "M" | "O";
            initPrice?: number;
            initAccruedInterest?: number;
            initConsideration?: number;
            initQuoteTime?: string;
            initGtdFlag?: string;
            initEndTime?: string;
            initRemarks?: string;
            initLoginId?: string;
            respSettlementType?: 0 | 1;
            respSettlementDate?: string;
            respAeCode?: string;
            respDealType?: "D" | "B";
            respClientCode?: string;
            respClientRegType?: "I" | "R";
            respValue?: number;
            respYieldType?: string;
            respYield?: number;
            respQuantity?: number;
            respCalcMethod?: "M" | "O";
            respPrice?: number;
            respAccruedInterest?: number;
            respConsideration?: number;
            respQuoteTime?: string;
            respGtdFlag?: string;
            respEndTime?: string;
            respRemarks?: string;
            respLoginId?: string;
            status: "N" | "R" | "A" | "C" | "E";
            tradeNumber?: string;
            acceptedSettlementType?: 0 | 1;
            acceptedSettlementDate?: string;
            acceptedValue?: number;
            acceptedQuantity?: number;
            acceptedYieldType?: string;
            acceptedYield?: number;
            acceptedCalcMethod?: "M" | "O";
            acceptedPrice?: number;
            acceptedPutCallDate?: string;
            acceptedAccruedInterest?: number;
            acceptedConsideration?: number;
            acceptedQuoteTime?: string;
            acceptedBySide?: "I" | "R";
            acceptedByLoginId?: string;
            confirmStatus?: "PP" | "PC" | "PR" | "CA" | "CC" | "CR";
            proposedBySide?: "I" | "R";
            proposedTime?: string;
            confirmedPriceQuoteTime?: string;
            tradeSplits?: any[];
        }>;
        updateNegotiation: import(".").ApiContract<{
            ngId: string;
            role: "I" | "R";
            ngRfqNumber: string;
            aeCode: string;
            dealType: "D" | "B";
            clientCode: string;
            settlementType: 0 | 1;
            value: number;
            quantity?: number;
            yieldType: string;
            yield: number;
            calcMethod: "M" | "O";
            price?: number | null;
            gtdFlag?: string | null;
            endTime?: string | null;
            remarks?: string | null;
        }, {
            rfqNumber: string;
            id: string;
            date: string;
            isin: string;
            buySell: "B" | "S";
            initSettlementType?: 0 | 1;
            initSettlementDate?: string;
            initAeCode?: string;
            initDealType?: "D" | "B";
            initClientCode?: string;
            initClientRegType?: "I" | "R";
            initValue?: number;
            initQuantity?: number;
            initYieldType?: string;
            initYield?: number;
            initCalcMethod?: "M" | "O";
            initPrice?: number;
            initAccruedInterest?: number;
            initConsideration?: number;
            initQuoteTime?: string;
            initGtdFlag?: string;
            initEndTime?: string;
            initRemarks?: string;
            initLoginId?: string;
            respSettlementType?: 0 | 1;
            respSettlementDate?: string;
            respAeCode?: string;
            respDealType?: "D" | "B";
            respClientCode?: string;
            respClientRegType?: "I" | "R";
            respValue?: number;
            respYieldType?: string;
            respYield?: number;
            respQuantity?: number;
            respCalcMethod?: "M" | "O";
            respPrice?: number;
            respAccruedInterest?: number;
            respConsideration?: number;
            respQuoteTime?: string;
            respGtdFlag?: string;
            respEndTime?: string;
            respRemarks?: string;
            respLoginId?: string;
            status: "N" | "R" | "A" | "C" | "E";
            tradeNumber?: string;
            acceptedSettlementType?: 0 | 1;
            acceptedSettlementDate?: string;
            acceptedValue?: number;
            acceptedQuantity?: number;
            acceptedYieldType?: string;
            acceptedYield?: number;
            acceptedCalcMethod?: "M" | "O";
            acceptedPrice?: number;
            acceptedPutCallDate?: string;
            acceptedAccruedInterest?: number;
            acceptedConsideration?: number;
            acceptedQuoteTime?: string;
            acceptedBySide?: "I" | "R";
            acceptedByLoginId?: string;
            confirmStatus?: "PP" | "PC" | "PR" | "CA" | "CC" | "CR";
            proposedBySide?: "I" | "R";
            proposedTime?: string;
            confirmedPriceQuoteTime?: string;
            tradeSplits?: any[];
        }>;
        withdrawNegotiationQuote: import(".").ApiContract<{
            rfqNumber: string;
            id: string;
            role: "I" | "R";
        }[], {
            rfqNumber: string;
            id: string;
            date: string;
            isin: string;
            buySell: "B" | "S";
            initSettlementType?: 0 | 1;
            initSettlementDate?: string;
            initAeCode?: string;
            initDealType?: "D" | "B";
            initClientCode?: string;
            initClientRegType?: "I" | "R";
            initValue?: number;
            initQuantity?: number;
            initYieldType?: string;
            initYield?: number;
            initCalcMethod?: "M" | "O";
            initPrice?: number;
            initAccruedInterest?: number;
            initConsideration?: number;
            initQuoteTime?: string;
            initGtdFlag?: string;
            initEndTime?: string;
            initRemarks?: string;
            initLoginId?: string;
            respSettlementType?: 0 | 1;
            respSettlementDate?: string;
            respAeCode?: string;
            respDealType?: "D" | "B";
            respClientCode?: string;
            respClientRegType?: "I" | "R";
            respValue?: number;
            respYieldType?: string;
            respYield?: number;
            respQuantity?: number;
            respCalcMethod?: "M" | "O";
            respPrice?: number;
            respAccruedInterest?: number;
            respConsideration?: number;
            respQuoteTime?: string;
            respGtdFlag?: string;
            respEndTime?: string;
            respRemarks?: string;
            respLoginId?: string;
            status: "N" | "R" | "A" | "C" | "E";
            tradeNumber?: string;
            acceptedSettlementType?: 0 | 1;
            acceptedSettlementDate?: string;
            acceptedValue?: number;
            acceptedQuantity?: number;
            acceptedYieldType?: string;
            acceptedYield?: number;
            acceptedCalcMethod?: "M" | "O";
            acceptedPrice?: number;
            acceptedPutCallDate?: string;
            acceptedAccruedInterest?: number;
            acceptedConsideration?: number;
            acceptedQuoteTime?: string;
            acceptedBySide?: "I" | "R";
            acceptedByLoginId?: string;
            confirmStatus?: "PP" | "PC" | "PR" | "CA" | "CC" | "CR";
            proposedBySide?: "I" | "R";
            proposedTime?: string;
            confirmedPriceQuoteTime?: string;
            tradeSplits?: any[];
        }[]>;
        terminateNegotiationThread: import(".").ApiContract<{
            rfqNumber: string;
            id: string;
            role: "I" | "R";
        }, {
            rfqNumber: string;
            id: string;
            date: string;
            isin: string;
            buySell: "B" | "S";
            initSettlementType?: 0 | 1;
            initSettlementDate?: string;
            initAeCode?: string;
            initDealType?: "D" | "B";
            initClientCode?: string;
            initClientRegType?: "I" | "R";
            initValue?: number;
            initQuantity?: number;
            initYieldType?: string;
            initYield?: number;
            initCalcMethod?: "M" | "O";
            initPrice?: number;
            initAccruedInterest?: number;
            initConsideration?: number;
            initQuoteTime?: string;
            initGtdFlag?: string;
            initEndTime?: string;
            initRemarks?: string;
            initLoginId?: string;
            respSettlementType?: 0 | 1;
            respSettlementDate?: string;
            respAeCode?: string;
            respDealType?: "D" | "B";
            respClientCode?: string;
            respClientRegType?: "I" | "R";
            respValue?: number;
            respYieldType?: string;
            respYield?: number;
            respQuantity?: number;
            respCalcMethod?: "M" | "O";
            respPrice?: number;
            respAccruedInterest?: number;
            respConsideration?: number;
            respQuoteTime?: string;
            respGtdFlag?: string;
            respEndTime?: string;
            respRemarks?: string;
            respLoginId?: string;
            status: "N" | "R" | "A" | "C" | "E";
            tradeNumber?: string;
            acceptedSettlementType?: 0 | 1;
            acceptedSettlementDate?: string;
            acceptedValue?: number;
            acceptedQuantity?: number;
            acceptedYieldType?: string;
            acceptedYield?: number;
            acceptedCalcMethod?: "M" | "O";
            acceptedPrice?: number;
            acceptedPutCallDate?: string;
            acceptedAccruedInterest?: number;
            acceptedConsideration?: number;
            acceptedQuoteTime?: string;
            acceptedBySide?: "I" | "R";
            acceptedByLoginId?: string;
            confirmStatus?: "PP" | "PC" | "PR" | "CA" | "CC" | "CR";
            proposedBySide?: "I" | "R";
            proposedTime?: string;
            confirmedPriceQuoteTime?: string;
            tradeSplits?: any[];
        }>;
        acceptNegotiationQuote: import(".").ApiContract<{
            rfqNumber: string;
            acceptedValue: number;
            id?: string;
            acceptedSettlementDate?: string;
            acceptedYieldType?: string;
            acceptedYield?: number;
            acceptedPrice?: number;
            respDealType?: "D" | "B";
            respClientCode?: string;
            role?: "I" | "R";
        }, {
            rfqNumber: string;
            id: string;
            date: string;
            isin: string;
            buySell: "B" | "S";
            initSettlementType?: 0 | 1;
            initSettlementDate?: string;
            initAeCode?: string;
            initDealType?: "D" | "B";
            initClientCode?: string;
            initClientRegType?: "I" | "R";
            initValue?: number;
            initQuantity?: number;
            initYieldType?: string;
            initYield?: number;
            initCalcMethod?: "M" | "O";
            initPrice?: number;
            initAccruedInterest?: number;
            initConsideration?: number;
            initQuoteTime?: string;
            initGtdFlag?: string;
            initEndTime?: string;
            initRemarks?: string;
            initLoginId?: string;
            respSettlementType?: 0 | 1;
            respSettlementDate?: string;
            respAeCode?: string;
            respDealType?: "D" | "B";
            respClientCode?: string;
            respClientRegType?: "I" | "R";
            respValue?: number;
            respYieldType?: string;
            respYield?: number;
            respQuantity?: number;
            respCalcMethod?: "M" | "O";
            respPrice?: number;
            respAccruedInterest?: number;
            respConsideration?: number;
            respQuoteTime?: string;
            respGtdFlag?: string;
            respEndTime?: string;
            respRemarks?: string;
            respLoginId?: string;
            status: "N" | "R" | "A" | "C" | "E";
            tradeNumber?: string;
            acceptedSettlementType?: 0 | 1;
            acceptedSettlementDate?: string;
            acceptedValue?: number;
            acceptedQuantity?: number;
            acceptedYieldType?: string;
            acceptedYield?: number;
            acceptedCalcMethod?: "M" | "O";
            acceptedPrice?: number;
            acceptedPutCallDate?: string;
            acceptedAccruedInterest?: number;
            acceptedConsideration?: number;
            acceptedQuoteTime?: string;
            acceptedBySide?: "I" | "R";
            acceptedByLoginId?: string;
            confirmStatus?: "PP" | "PC" | "PR" | "CA" | "CC" | "CR";
            proposedBySide?: "I" | "R";
            proposedTime?: string;
            confirmedPriceQuoteTime?: string;
            tradeSplits?: any[];
        }[]>;
        getAllNegotiations: import(".").ApiContract<{
            rfqNumber?: string;
            id?: string;
            date?: string;
        }, {
            rfqNumber: string;
            id: string;
            date: string;
            isin: string;
            buySell: "B" | "S";
            initSettlementType?: 0 | 1;
            initSettlementDate?: string;
            initAeCode?: string;
            initDealType?: "D" | "B";
            initClientCode?: string;
            initClientRegType?: "I" | "R";
            initValue?: number;
            initQuantity?: number;
            initYieldType?: string;
            initYield?: number;
            initCalcMethod?: "M" | "O";
            initPrice?: number;
            initAccruedInterest?: number;
            initConsideration?: number;
            initQuoteTime?: string;
            initGtdFlag?: string;
            initEndTime?: string;
            initRemarks?: string;
            initLoginId?: string;
            respSettlementType?: 0 | 1;
            respSettlementDate?: string;
            respAeCode?: string;
            respDealType?: "D" | "B";
            respClientCode?: string;
            respClientRegType?: "I" | "R";
            respValue?: number;
            respYieldType?: string;
            respYield?: number;
            respQuantity?: number;
            respCalcMethod?: "M" | "O";
            respPrice?: number;
            respAccruedInterest?: number;
            respConsideration?: number;
            respQuoteTime?: string;
            respGtdFlag?: string;
            respEndTime?: string;
            respRemarks?: string;
            respLoginId?: string;
            status: "N" | "R" | "A" | "C" | "E";
            tradeNumber?: string;
            acceptedSettlementType?: 0 | 1;
            acceptedSettlementDate?: string;
            acceptedValue?: number;
            acceptedQuantity?: number;
            acceptedYieldType?: string;
            acceptedYield?: number;
            acceptedCalcMethod?: "M" | "O";
            acceptedPrice?: number;
            acceptedPutCallDate?: string;
            acceptedAccruedInterest?: number;
            acceptedConsideration?: number;
            acceptedQuoteTime?: string;
            acceptedBySide?: "I" | "R";
            acceptedByLoginId?: string;
            confirmStatus?: "PP" | "PC" | "PR" | "CA" | "CC" | "CR";
            proposedBySide?: "I" | "R";
            proposedTime?: string;
            confirmedPriceQuoteTime?: string;
            tradeSplits?: any[];
        }[]>;
        proposeDeal: import(".").ApiContract<{
            ngRfqNumber: string;
            ngId: string;
            participantCode: string;
            dealType: "D" | "B";
            price: number;
            accruedInterest: number;
            clientCode: string;
            calcMethod: "M" | "O";
            consideration: number;
            putCallDate?: string;
            remarks?: string;
            tradeSplits?: Array<{
                val: number;
                qty: number;
                accInt: number;
                cons: number;
                propCust?: string;
                couCust?: string;
            }>;
            role: "I" | "R";
        }, {
            rfqNumber: string;
            id: string;
            date: string;
            isin: string;
            buySell: "B" | "S";
            initSettlementType?: 0 | 1;
            initSettlementDate?: string;
            initAeCode?: string;
            initDealType?: "D" | "B";
            initClientCode?: string;
            initClientRegType?: "I" | "R";
            initValue?: number;
            initQuantity?: number;
            initYieldType?: string;
            initYield?: number;
            initCalcMethod?: "M" | "O";
            initPrice?: number;
            initAccruedInterest?: number;
            initConsideration?: number;
            initQuoteTime?: string;
            initGtdFlag?: string;
            initEndTime?: string;
            initRemarks?: string;
            initLoginId?: string;
            respSettlementType?: 0 | 1;
            respSettlementDate?: string;
            respAeCode?: string;
            respDealType?: "D" | "B";
            respClientCode?: string;
            respClientRegType?: "I" | "R";
            respValue?: number;
            respYieldType?: string;
            respYield?: number;
            respQuantity?: number;
            respCalcMethod?: "M" | "O";
            respPrice?: number;
            respAccruedInterest?: number;
            respConsideration?: number;
            respQuoteTime?: string;
            respGtdFlag?: string;
            respEndTime?: string;
            respRemarks?: string;
            respLoginId?: string;
            status: "N" | "R" | "A" | "C" | "E";
            tradeNumber?: string;
            acceptedSettlementType?: 0 | 1;
            acceptedSettlementDate?: string;
            acceptedValue?: number;
            acceptedQuantity?: number;
            acceptedYieldType?: string;
            acceptedYield?: number;
            acceptedCalcMethod?: "M" | "O";
            acceptedPrice?: number;
            acceptedPutCallDate?: string;
            acceptedAccruedInterest?: number;
            acceptedConsideration?: number;
            acceptedQuoteTime?: string;
            acceptedBySide?: "I" | "R";
            acceptedByLoginId?: string;
            confirmStatus?: "PP" | "PC" | "PR" | "CA" | "CC" | "CR";
            proposedBySide?: "I" | "R";
            proposedTime?: string;
            confirmedPriceQuoteTime?: string;
            tradeSplits?: Array<{
                val: number;
                qty: number;
                accInt: number;
                cons: number;
                propCust?: string;
                couCust?: string;
            }>;
        }>;
        acceptOrRejectDeal: import(".").ApiContract<{
            rfqNumber: string;
            id: string;
            acceptedPrice?: number;
            acceptedPutCallDate?: string;
            acceptedAccruedInterest?: number;
            acceptedConsideration?: number;
            confirmStatus: "PC" | "PR";
        }, {
            rfqNumber: string;
            id: string;
            date: string;
            isin: string;
            buySell: "B" | "S";
            initSettlementType?: 0 | 1;
            initSettlementDate?: string;
            initAeCode?: string;
            initDealType?: "D" | "B";
            initClientCode?: string;
            initClientRegType?: "I" | "R";
            initValue?: number;
            initQuantity?: number;
            initYieldType?: string;
            initYield?: number;
            initCalcMethod?: "M" | "O";
            initPrice?: number;
            initAccruedInterest?: number;
            initConsideration?: number;
            initQuoteTime?: string;
            initGtdFlag?: string;
            initEndTime?: string;
            initRemarks?: string;
            initLoginId?: string;
            respSettlementType?: 0 | 1;
            respSettlementDate?: string;
            respAeCode?: string;
            respDealType?: "D" | "B";
            respClientCode?: string;
            respClientRegType?: "I" | "R";
            respValue?: number;
            respYieldType?: string;
            respYield?: number;
            respQuantity?: number;
            respCalcMethod?: "M" | "O";
            respPrice?: number;
            respAccruedInterest?: number;
            respConsideration?: number;
            respQuoteTime?: string;
            respGtdFlag?: string;
            respEndTime?: string;
            respRemarks?: string;
            respLoginId?: string;
            status: "N" | "R" | "A" | "C" | "E";
            tradeNumber?: string;
            acceptedSettlementType?: 0 | 1;
            acceptedSettlementDate?: string;
            acceptedValue?: number;
            acceptedQuantity?: number;
            acceptedYieldType?: string;
            acceptedYield?: number;
            acceptedCalcMethod?: "M" | "O";
            acceptedPrice?: number;
            acceptedPutCallDate?: string;
            acceptedAccruedInterest?: number;
            acceptedConsideration?: number;
            acceptedQuoteTime?: string;
            acceptedBySide?: "I" | "R";
            acceptedByLoginId?: string;
            confirmStatus?: "PP" | "PC" | "PR" | "CA" | "CC" | "CR";
            proposedBySide?: "I" | "R";
            proposedTime?: string;
            confirmedPriceQuoteTime?: string;
            tradeSplits?: Array<{
                val: number;
                qty: number;
                accInt: number;
                cons: number;
                propCust?: string;
                couCust?: string;
            }>;
        }>;
        addTradeSplit: import(".").ApiContract<{
            rfqNumber: string;
            id: string;
            tradeSplits?: Array<{
                val: number;
                qty: number;
                accInt: number;
                cons: number;
                propCust?: string;
                couCust?: string;
            }>;
        }, {
            rfqNumber: string;
            id: string;
            date: string;
            isin: string;
            buySell: "B" | "S";
            initSettlementType?: 0 | 1;
            initSettlementDate?: string;
            initClientCode?: string;
            initAeCode?: string;
            initValue?: number;
            initQuantity?: number;
            initYieldType?: string;
            initYield?: number;
            initCalcMethod?: "M" | "O";
            initPrice?: number;
            initQuoteTime?: string;
            initGtdFlag?: string;
            initEndTime?: string;
            initRemarks?: string;
            initLoginId?: string;
            respSettlementType?: 0 | 1;
            respSettlementDate?: string;
            respClientCode?: string;
            respAeCode?: string;
            respValue?: number;
            respQuantity?: number;
            respYieldType?: string;
            respYield?: number;
            respCalcMethod?: "M" | "O";
            respPrice?: number;
            respPutCallDate?: string;
            respQuoteTime?: string;
            respGtdFlag?: string;
            respEndTime?: string;
            respRemarks?: string;
            respLoginId?: string;
            status: "N" | "R" | "A" | "C" | "E";
            tradeNumber?: string;
            acceptedSettlementType?: 0 | 1;
            acceptedSettlementDate?: string;
            acceptedValue?: number;
            acceptedQuantity?: number;
            acceptedYieldType?: string;
            acceptedYield?: number;
            acceptedCalcMethod?: "M" | "O";
            acceptedPrice?: number;
            acceptedAccruedInterest?: number;
            acceptedConsideration?: number;
            acceptedQuoteTime?: string;
            acceptedBySide?: "I" | "R";
            acceptedByLoginId?: string;
            confirmStatus?: "PP" | "PC" | "PR" | "CA" | "CC" | "CR";
            confirmedPriceQuoteTime?: string;
            tradeSplits?: Array<{
                val: number;
                qty: number;
                accInt: number;
                cons: number;
                propCust?: string;
                couCust?: string;
            }>;
        }>;
        changeClient: import(".").ApiContract<{
            ngRfqNumber: string;
            ngId: string;
            dealType: "D" | "B";
            clientCode: string;
            buySell: "B" | "S";
        }, {
            date: string;
            acceptedCalcMethod?: "M" | "O";
            tradeNumber?: string;
            initQuoteTime?: string;
            initSettlementType?: 0 | 1;
            respAeCode?: string;
            tradeSplits?: null | any;
            initSettlementDate?: string;
            initAccruedInterest?: number;
            acceptedValue?: number;
            confirmedPriceQuoteTime?: string;
            initGtdFlag?: string;
            initYield?: number;
            respClientCode?: string;
            respAccruedInterest?: number;
            confirmStatus?: "PP" | "PC" | "PR" | "CA" | "CC" | "CR";
            respClientRegType?: "I" | "U";
            id: string;
            initYieldType?: "YTM" | "YTP" | "YTC";
            respPrice?: number;
            initLoginId?: string;
            respQuoteTime?: string;
            respEndTime?: string;
            acceptedBySide?: "I" | "R";
            respCalcMethod?: "M" | "O";
            initAeCode?: string;
            acceptedSettlementDate?: string;
            acceptedPrice?: number;
            respGtdFlag?: string;
            acceptedQuantity?: number;
            acceptedByLoginId?: string;
            acceptedAccruedInterest?: number;
            respConsideration?: number;
            initQuantity?: number;
            respDealType?: "D" | "B";
            status: "N" | "R" | "A" | "C" | "E";
            respSettlementDate?: string;
            respValue?: number;
            initClientRegType?: "I" | "U";
            respLoginId?: string;
            initPrice?: number;
            initClientCode?: string;
            respYieldType?: "YTM" | "YTP" | "YTC";
            acceptedYieldType?: "YTM" | "YTP" | "YTC";
            acceptedSettlementType?: 0 | 1;
            acceptedConsideration?: number;
            respSettlementType?: number;
            respRemarks?: string;
            initValue?: number;
            initCalcMethod?: "M" | "O";
            buySell: "B" | "S";
            acceptedQuoteTime?: string;
            initAuId?: string;
            rfqNumber: string;
            acceptedPutCallDate?: string;
            acceptedYield?: number;
            respYield?: number;
            initConsideration?: number;
            initEndTime?: string;
            respQuantity?: number;
            isin?: string;
            initDealType?: "D" | "B";
            initRemarks?: string;
        }>;
        getAllParticipants: import(".").ApiContract<void, {
            code: string;
            name: string;
        }[]>;
        getAllIsins: import(".").ApiContract<{
            description?: string;
            filtIssueCategory?: "CB" | "CP" | "CD" | "SD" | "GS";
            issuer?: string;
            filtMaturity?: "0^1" | "1^3" | "3^5" | "5^7" | "7^10" | "10^";
            filtCoupon?: "0^3" | "3^5" | "5^6" | "6^7" | "7^8" | "8^9" | "9^10" | "10^";
        }, {
            symbol: string;
            description: string;
            issuer: string;
            maturityDate: string;
            couponRate: number;
            faceValue: number;
            issueCategory: "CB" | "CP" | "CD" | "SD" | "GS";
            listed: "Y" | "N";
        }[]>;
        calculatePriceFromYield: import(".").ApiContract<{
            isin: string;
            settlementDate: string;
            yieldType: "YTM" | "YTP" | "YTC";
            yield: number;
            aiDcc: 1 | 2 | 3 | 4;
        }, {
            calcMethod: "M" | "O";
            putCallDate?: string;
            price: number;
            accruedInterest: number;
        }>;
        calculateYieldFromPrice: import(".").ApiContract<{
            isin: string;
            settlementDate: string;
            yieldType: "YTM" | "YTP" | "YTC";
            price: number;
            aiDcc: 1 | 2 | 3 | 4;
        }, {
            calcMethod: "M" | "O";
            putCallDate?: string;
            yield: number;
            accruedInterest: number;
        }>;
        getMarketTimings: import(".").ApiContract<void, {
            type: string;
            starttimeT0: number;
            starttimeT1: number;
            yieldcutoffT0: number;
            yieldcutoffT1: number;
            pricecutoffT0: number;
            pricecutoffT1: number;
        }[]>;
    };
    webhookBody: WebhookNotificationRequest;
};
export interface WebhookNotificationRequest {
    rfqList?: RfqMaster[];
    negotiationList?: Negotiation[];
}
export interface RfqMaster {
    number: string;
    isin: string;
    buySell: "B" | "S";
    quoteType: string;
    settlementType: number;
    value: number;
    quantity: number;
    yieldType: string;
    yield: number;
    calcMethod: "M" | "O";
    price: number;
    gtdFlag: string | null;
    endTime: string | null;
    quoteNegotiable: "Y" | "N";
    valueNegotiable: "Y" | "N";
    minFillValue: number;
    valueStepSize: number;
    dealType: "D" | "B";
    anonymous: "Y" | "N";
    access: number;
    groupList: string[];
    participantList: string[];
    category: string;
    rating: string;
    remarks: string;
    status: string;
    participantCode: string;
    userLogin: string;
    tradedValue: number;
    confirmedValue: number;
}
export interface Negotiation {
    ngRfqNumber: string;
    id: string;
    date: string;
    isin: string;
    buySell: "B" | "S";
    initSettlementType: number;
    initSettlementDate: string;
    initClientCode: string;
    initAeCode: string;
    initValue: number;
    initQuantity: number;
    initYieldType: string;
    initYield: number;
    initCalcMethod: "M" | "O";
    initPrice: number;
    initQuoteTime: string;
    initGtdFlag: string;
    initEndTime: string | null;
    initRemarks: string | null;
    initLoginId: string | null;
    respSettlementType: number;
    respSettlementDate: string;
    respClientCode: string;
    respAeCode: string;
    respValue: number;
    respQuantity: number;
    respYieldType: string;
    respYield: number;
    respCalcMethod: "M" | "O";
    respPrice: number;
    respPutCallDate: string | null;
    respQuoteTime: string;
    respGtdFlag: string;
    respEndTime: string | null;
    respRemarks: string | null;
    respLoginId: string;
    status: string;
}
export default rfq;
